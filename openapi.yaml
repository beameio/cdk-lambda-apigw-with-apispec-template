openapi: 3.0.1
info:
  title: Template API Spec
  description: APIs for the template example
  version: "0.1"

servers:
  - url: https://development.template_server.com/v1
    description: Development server
  - url: https://staging.template_server.com/v1
    description: Staging server
  - url: https://api.template_server.com/v1
    description: Production server

tags:
  - name: Users
    description: User operation related endpoints

security: # default security for operations
  - user_auth: [ profile, openid, email ]

components:
  securitySchemes:
    iam_auth:
      type: apiKey
      in: header
      name: x-amz-security-token
      x-amazon-apigateway-authtype: 'awsSigv4'
      description: 'IAM access. Used by internal infrastructure, like cognito and lambdas'
    api_key:
      type: apiKey
      name: api_key
      in: header
    user_auth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: /oauth2/authorize
          tokenUrl: /oauth2/token
          scopes:
            openid: Grants openid profile
            profile: Grants auth2 profile
            email: Grants auth2 email scope
      description: 'User authenticated access'
  parameters:
    user_id:
      name: user_id
      description: User Id
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
  responses:
    success:
      description: Operation has completed successfully
    problem:
      description: Client Error
      headers:
        Content-Language:
          schema:
            description: Describes the natural language of the intended audience for the representation (see [RFC 72310](https://tools.ietf.org/html/rfc7231#section-3.1.3.2))
            type: string
            example: en-US
      content:
        application/problem+json:
          schema:
            type: object
            description: Follows the application/problem+json definition (see [RFC 7807](https://tools.ietf.org/html/rfc7807)).
            properties:
              type:
                description: An absolute URI reference (see [RFC 3986](https://tools.ietf.org/html/rfc3986)) that identifies the problem type.
                type: string
              title:
                description: A short, human-readable summary of the problem type.
                type: string
              status:
                description: The HTTP status code (see [RFC 7231, Section 6](https://tools.ietf.org/html/rfc7231#section-6)) generated by the origin server for this occurrence of the problem.
                type: number
                format: int32
                minimum: 100
                maximum: 600
                exclusiveMaximum: true
              detail:
                description: A human-readable explanation specific to this occurrence of the problem.
                type: string
              instance:
                description: A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if de-referenced.
                type: string
          example:
            title: Not Found
            status: 404

  schemas:
    id_type:
      type: integer
      readOnly: true
      description: ID
    id_schema:
      type: object
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/id_type'
    dates_schema:
      type: object
      properties:
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
          readOnly: true

    user_request_schema:
      allOf:
        - type: object
          required:
            - email
          properties:
            email:
              type: string
              description: the user email
            firstName:
              type: string
              description: the user first name
            lastName:
              type: string
              description: the user last name
    user_response_schema:
      allOf:
        - $ref: '#/components/schemas/id_schema'
        - $ref: '#/components/schemas/dates_schema'
        - $ref: '#/components/schemas/user_request_schema'


paths:
  # Users
  /users:
    get:
      operationId: get_users
      tags:
        - Users
      description: Retrieves all users
      responses:
        '200':
          description: Operation has completed successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - results
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/user_response_schema'
        '4XX':
          $ref: '#/components/responses/problem'

    post:
      operationId: post_users
      tags:
        - Users
      description: Creates multiple users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user_request_schema'
        required: true
      responses:
        '201':
          description: Users were created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/id_schema'
        '4XX':
          $ref: '#/components/responses/problem'

  /users/{user_id}:
    get:
      operationId: get_user
      tags:
        - Users
      description: Retrieves a user
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        '200':
          description: Operation has completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_response_schema'
        '4XX':
          $ref: '#/components/responses/problem'

    put:
      operationId: put_user
      tags:
        - Users
      description: Updates a user
      parameters:
        - $ref: '#/components/parameters/user_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user_request_schema'
        required: true
      responses:
        '200':
          description: User was updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_response_schema'
        '4XX':
          $ref: '#/components/responses/problem'


    delete:
      operationId: delete_user
      tags:
        - Users
      description: Deletes a user
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        '200':
          $ref: '#/components/responses/success'
        '4XX':
          $ref: '#/components/responses/problem'
